<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on West Mountain Dock</title>
    <link>https://nishiyamasu.xyz/posts/</link>
    <description>Recent content in Posts on West Mountain Dock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Nishiyama</copyright>
    <lastBuildDate>Mon, 22 Jan 2018 13:42:29 +0900</lastBuildDate>
    
	<atom:link href="https://nishiyamasu.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[AWS boto] botoでAWSのcreadentialを指定する</title>
      <link>https://nishiyamasu.xyz/posts/boto-craedential/</link>
      <pubDate>Mon, 22 Jan 2018 13:42:29 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/boto-craedential/</guid>
      <description>AWSのPython　SDKであるbotoのメモ。
botoはデフォルトでaws　configureによって設定される情報を使用して認証を行う。
今回紹介する方法は、その認証情報を利用せずに、自分でAccess　KeyとSecret　Keyを指定する。
クライアント作成時の、パラメータを以下のように、指定する。
1234567 import boto3 # 本来は、認証情報のハードコードは、やってはいけません。 client = boto3.client(&amp;#39;ec2&amp;#39;, aws_access_key_id=&amp;#39;&amp;lt;Your Access Key&amp;gt;&amp;#39;, aws_secret_access_key=&amp;#39;&amp;lt;Your Secret Key&amp;gt;&amp;#39; )   </description>
    </item>
    
    <item>
      <title>Linuxでランレベルを見る</title>
      <link>https://nishiyamasu.xyz/posts/runlevel/</link>
      <pubDate>Fri, 19 Jan 2018 11:50:56 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/runlevel/</guid>
      <description>Linuxで現在のランレベルを見るためのコマンド 代表例。 $ runlevel もうひとつ。 $ who -r おまけ # chkconfig (各ランレベルでのサービス利用可能状況を見る) ランレベルとは 次から引用。 http://www.linfo.org/runlevel_def.html
 0 - System halt; no activity, the system can be safely powered down.
1 - Single user; rarely used.
2 - Multiple users, no NFS (network filesystem); also used rarely.
3 - Multiple users, command line (i.e., all-text mode) interface; the standard runlevel for most Linux-based server hardware.
4 - User-definable
5 - Multiple users, GUI (graphical user interface); the standard runlevel for most Linux-based desktop systems.</description>
    </item>
    
    <item>
      <title>Linuxでユーザを作成し、パスワードを変更する。</title>
      <link>https://nishiyamasu.xyz/posts/linux-userpass/</link>
      <pubDate>Thu, 11 Jan 2018 10:56:49 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/linux-userpass/</guid>
      <description>Create new user and Change password for the user.
adduser &amp;lt;username&amp;gt; echo &amp;lt;username&amp;gt; | passwd &amp;lt;password&amp;gt; --stdin </description>
    </item>
    
    <item>
      <title>vsftpdの設定メモ</title>
      <link>https://nishiyamasu.xyz/posts/vsftpd-setting/</link>
      <pubDate>Sun, 31 Dec 2017 01:43:13 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/vsftpd-setting/</guid>
      <description> 前置き vsftpdによる設定で最初にしておいた方がいいもの。
インストールした後の段階。
chrootの設定は、また別の記事で。
 OS Ubuntu16.04LTS  手順 /etc/vsftpd.confのファイルを編集する。
# コメント外す write_enable=YES # コメント外す chroot_local_user=YES # 行追加 pasv_min_port=40000 pasv_max_port=50000 </description>
    </item>
    
    <item>
      <title>Graphvizサンプル2</title>
      <link>https://nishiyamasu.xyz/posts/graphviz-2/</link>
      <pubDate>Fri, 29 Dec 2017 18:08:43 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/graphviz-2/</guid>
      <description> コード digraph graph_name { graph [ ranksep = 2; ] root -&amp;gt; Child1 [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; Child1 [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; Child1 [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; Child1 [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; Child1 [ color = &amp;#34;blue&amp;#34; ]; root -&amp;gt; Child2 [ color = &amp;#34;blue&amp;#34; ]; root -&amp;gt; Child3 [ color = &amp;#34;blue&amp;#34; ]; root -&amp;gt; Child4 [ color = &amp;#34;blue&amp;#34; ]; root -&amp;gt; Child5 [ color = &amp;#34;blue&amp;#34; ]; root -&amp;gt; Child6 [ color = &amp;#34;blue&amp;#34; ]; root -&amp;gt; Child7 [ color = &amp;#34;blue&amp;#34; ]; } 出来上がった図 コード digraph graph_name { graph [ ranksep = 2; ] root -&amp;gt; root_child [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; root_child [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; root_child [ color = &amp;#34;red&amp;#34; ]; root -&amp;gt; root_child [ color = &amp;#34;red&amp;#34; ]; root_child -&amp;gt; Child1 [ color = &amp;#34;blue&amp;#34; ]; root_child -&amp;gt; Child2 [ color = &amp;#34;blue&amp;#34; ]; root_child -&amp;gt; Child3 [ color = &amp;#34;blue&amp;#34; ]; root_child -&amp;gt; Child4 [ color = &amp;#34;blue&amp;#34; ]; root_child -&amp;gt; Child5 [ color = &amp;#34;blue&amp;#34; ]; root_child -&amp;gt; Child6 [ color = &amp;#34;blue&amp;#34; ]; root_child -&amp;gt; Child7 [ color = &amp;#34;blue&amp;#34; ]; } 出来上がった図 </description>
    </item>
    
    <item>
      <title>Graphvizのサンプル1</title>
      <link>https://nishiyamasu.xyz/posts/graphviz-rem/</link>
      <pubDate>Fri, 29 Dec 2017 10:45:50 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/graphviz-rem/</guid>
      <description> コード digraph { graph [ rankdir = LR; ] Ins1 -&amp;gt; Ins2; Ins2 -&amp;gt; Ins1; }  出来上がった図 グラフに与えた設定  rankdir : LR  </description>
    </item>
    
    <item>
      <title>PythonのLoggingについて</title>
      <link>https://nishiyamasu.xyz/posts/python-logging/</link>
      <pubDate>Fri, 29 Dec 2017 10:28:32 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/python-logging/</guid>
      <description> 必ず、以下のような作法にする。
1234567891011121314151617181920212223 from logging import getLogger, StreamHandler, DEBUG, Formatter myformat = Formatter(&amp;#39;%(asctime)s- %(name)s- %(levelname)s- %(message)s&amp;#39;) logger = getLogger(&amp;#34;Sample&amp;#34;) handler = StreamHandler() handler.setLevel(DEBUG) handler.setFormatter(myformat) logger.setLevel(DEBUG) logger.addHandler(handler) # logger.propagate = False logger.debug(&amp;#39;hello&amp;#39;) try: logger.info(&amp;#34;Program started.&amp;#34;) for i in range(3): print(&amp;#34;count {}&amp;#34;.format(i)) raise Exception except Exception as e: logger.error(&amp;#34;We got error while excuting program. {}&amp;#34;.format(e))   主要ロギングハンドラ  StreamHandler FileHandler  フォーマッタの種類  %(asctime)s %(name)s %(levelname)s %(message)s  </description>
    </item>
    
    <item>
      <title>gcloud コマンドのメモ</title>
      <link>https://nishiyamasu.xyz/posts/gcloud-commands/</link>
      <pubDate>Wed, 27 Dec 2017 16:03:32 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/gcloud-commands/</guid>
      <description> gcloud のアップデートや、インストール $ gcloud components update $ gcloud components install app-engine-go  App Engine デプロイ時にバージョンを指定する
$ gcloud app deploy --version &amp;lt;version-name&amp;gt; ↓例: devのバージョン名でデプロイする。 $ gcloud app deploy --version dev  </description>
    </item>
    
    <item>
      <title>今週のメモ　2017-12-27</title>
      <link>https://nishiyamasu.xyz/posts/aws-cli/</link>
      <pubDate>Wed, 27 Dec 2017 15:44:28 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/aws-cli/</guid>
      <description> AWS cli で処理を待つ（コマンド） 次のようなコマンドで待つことができる。
# create vpc command with specifying ipv4 cidr # output format : json $ aws ec2 create-vpc --cidr-block 10.0.0.0/16 # view wait help doc $ aws ec2 wait help # wait until vpc is ready $ aws ec2 wait vpc-available --vpc-ids  Linuxでユーザをsudo権限のグループに入れる usermod -aG sudo &amp;lt;username&amp;gt; ( Ubuntu ) usermod -aG wheel &amp;lt;username&amp;gt; ( CentOS )  dateコマンドで「YYYYMMDD」形式で表示する date &amp;quot;+%Y%m%d&amp;quot;  </description>
    </item>
    
    <item>
      <title>MYSQLの操作あれこれ</title>
      <link>https://nishiyamasu.xyz/posts/querys-sql/</link>
      <pubDate>Sun, 24 Dec 2017 16:05:37 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/querys-sql/</guid>
      <description> 権限設定 mysql&amp;gt; flush privileges on &amp;lt;schema&amp;gt;.* to &#39;&amp;lt;user&amp;gt;&#39;@&#39;&amp;lt;host&amp;gt;&#39;;  権限を見る mysql&amp;gt; show grants;  データベースのステータスを見る。 mysql&amp;gt; status;  DDLを見る。 mysql&amp;gt; show create table &amp;lt;tablename&amp;gt;; mysql&amp;gt; show create user &amp;lt;tablename&amp;gt;;  sample eer </description>
    </item>
    
    <item>
      <title>MYSQLのIP制限を解除したい</title>
      <link>https://nishiyamasu.xyz/posts/unlimit-mysql-con/</link>
      <pubDate>Sat, 23 Dec 2017 20:00:01 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/unlimit-mysql-con/</guid>
      <description>MYSQLのbind-address制限を解除する。
bind-addressの行をコメントアウトする。
$ sudo vim /etc/mysql/mysql.conf.d/mysqld.conf ( /etc/mysql/mysql.conf ) --途中は省略-- # bind-address 127.0.0.1  </description>
    </item>
    
    <item>
      <title>Job Shell</title>
      <link>https://nishiyamasu.xyz/posts/job-shell/</link>
      <pubDate>Thu, 21 Dec 2017 17:34:36 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/job-shell/</guid>
      <description>my shell snippets.
# view other login user $ w # view own teletypewriter $ tty # view host&#39;s working time $ uptime # view listening port ( TCP, UDP, unix socket respectively ) $ netstat -tnl $ netstat -unl $ netstat -xnl ########################### # Apache Log grep ########################### # limit by date (calendar) $ grep &amp;quot;08/Dec/2007&amp;quot; # limit by hour (example: 22 o&#39;clock) $ grep &amp;quot;08/Dec/2007:22:&amp;quot; # get DNS server $ cat /etc/resolv.</description>
    </item>
    
    <item>
      <title>Git_submodule</title>
      <link>https://nishiyamasu.xyz/posts/git_submodule/</link>
      <pubDate>Thu, 21 Dec 2017 17:21:43 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/git_submodule/</guid>
      <description>Git submodule clone command.
git submodule update -i  </description>
    </item>
    
    <item>
      <title>Second</title>
      <link>https://nishiyamasu.xyz/posts/second/</link>
      <pubDate>Wed, 20 Dec 2017 21:21:35 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/second/</guid>
      <description>Today, I will show you some my old story. It&amp;rsquo;s a boring and keeping you sleppy. good .
Golang Snippet.
 package main import ( &amp;quot;encoding/json&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;github.com/jinzhu/gorm&amp;quot; _ &amp;quot;github.com/jinzhu/gorm/dialects/mysql&amp;quot; ) type Product struct { gorm.Model Code string Price uint } type User struct { gorm.Model Emails []Email Name string } type Email struct { gorm.Model Email string UserID uint } func main() { db, err := gorm.Open(&amp;quot;mysql&amp;quot;, &amp;quot;root@/rem?charset=utf8&amp;amp;parseTime=True&amp;amp;loc=Local&amp;quot;) if err !</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://nishiyamasu.xyz/posts/my-first-post/</link>
      <pubDate>Wed, 20 Dec 2017 20:42:30 +0900</pubDate>
      
      <guid>https://nishiyamasu.xyz/posts/my-first-post/</guid>
      <description>nice one.
italic
 It&amp;rsquo;s a next sentense.
 # code snip [nishi]$ bash ls -al [nishi]$ cd /var  </description>
    </item>
    
  </channel>
</rss>